// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  ACCEPTED
  CANCELLED
  PENDING
  REJECTED
}

// Type

type TFaq {
  question String
  answer String
}

// Model

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  referesh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  email String @unique
  emailVerified DateTime?
  hashedPassword String?
  resetToken String?
  resetTokenExpiry DateTime?
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  locatedIn String?
  timeZone String?
  favoriteIds String[] @db.ObjectId
  position String?
  workAt String?
  isAway Boolean @default(false)
  isMentor Boolean @default(false)

  role Role @default(USER)

  accounts Account[]

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  profile Profile?

  schedules Schedule[]
  availability Availability[]

  bookingSessions BookingSession[]
  subscriptions Subscription[]

  reviews Review[]

  
  @@unique([firstName, lastName])

  // Referral
  referral Referral[]
  
  // Stripe
  stripeCustomerId String?
  paymentMethodId String?

}


model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean

  messageIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationIds String @db.ObjectId
  conversation Conversation @relation(fields: [conversationIds], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // isMentor Boolean? @default(false)
  hasMentorshipPlan Boolean? @default(false)
  avatar String
  bio String
  profileTitle String
  locationValue String
  locationFlag String
  company String
  position String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // isPremium Boolean? @default(false)
  menteeCount Int @default(1)

  linkedIn String?
  twitter String?
  facebook String?
  instagram String?
  website String?

  sucessStory String?

  myExpertise String[]

  sessionPrice Int @default(1)
  minTimeBlock Int? @default(30)

  growthPrice Int?
  scalePrice Int?
  advancedPrice Int?

  callPerMonthGrowth Int?
  callPerMonthScale Int?
  callPerMonthAdvanced Int?

  chatPerMonthGrowth String?
  chatPerMonthScale String?
  chatPerMonthAdvanced String?

  responseDelayGrowth Int?
  responseDelayScale Int?
  responseDelayAdvanced Int?

  supportGrowth Boolean?
  supportScale Boolean?
  supportAdvanced Boolean?


  mentorId String @unique @db.ObjectId
  mentor User @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  
  slug String? @unique

  // expertiseIds String[] @db.ObjectId
  // expertise Expertise[] @relation(fields: [expertiseIds], references: [id])

  // toolKitIds String[] @db.ObjectId
  // toolKit Toolkit[] @relation(fields: [toolKitIds], references: [id])


  faq Faq[]

  bookingSessions BookingSession[]
  subscriptions Subscription[]

  reviews Review[]

  // STRIPE
  stripeAccountId String
  stripeSessionProductId String
  stripeSessionProductPriceId String

  stripeProductGrowthId String?
  stripeProductScaleId String?
  stripeProductAdvancedId String?

  stripePriceGrowthId String?
  stripePriceScaleId String?
  stripePriceAdvancedId String?
}


model BookingSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  profileId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  when DateTime
  startTime DateTime
  endTime DateTime
  rescheduled Boolean?
  cancellationReason String?
  smsReminder String?
  meetingUrl String?
  meetingPassword String?

  totalPrice Int?
  duration Int?

  paymentIds String[] @db.ObjectId
  payment Payment[] @relation(fields: [paymentIds], references: [id])

  status BookingStatus @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // stripeAccountId String?
  // stripeOnboardingComplete Boolean?
  isComplete Boolean @default(false)
  // paymentSucceeded Boolean @default(false)
   
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  profileId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan String
  totalPrice Int
  chat String
  responseDelay Int
  call Int
  support Boolean
  stripeProductId String
  stripePriceId String
  stripeSubscriptionId String
  isActive Boolean
  isPaid Boolean @default(false)
  paymentMethodId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
}

model Schedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  timeZone String? @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability Availability[]
  
}

model Availability {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  days Int[]
  startTime DateTime
  endTime DateTime
  date DateTime
  scheduleId String? @db.ObjectId
  schedule Schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

}

// model Expertise {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   name String
//   profileIds String[] @db.ObjectId
//   profile Profile[] @relation(fields: [profileIds], references: [id])
// }

// model Toolkit {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   name String
//   logo String

//   profileIds String[] @db.ObjectId
//   profile Profile[] @relation(fields: [profileIds], references: [id])

// }


model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  bookingSessionIds String[] @db.ObjectId
  bookingSession BookingSession[] @relation(fields: [bookingSessionIds], references: [id])
}

model Faq {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content TFaq[]
  profileIds String @db.ObjectId
  profile Profile @relation(fields: [profileIds], references: [id], onDelete: Cascade)
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  rating Int
  comment String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
}

model Referral {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  guestEmail String @unique
  hostId String @db.ObjectId
  host User @relation(fields: [hostId], references: [id])
  hasRegistered Boolean @default(false)
}






